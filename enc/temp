#include "main.h"

NODE* makeNode(char letter, NODE* parent);
ENC* insertNode(char letter, NODE* root);
void saveEncStream(FILE* of, unsigned int num, char letter);
unsigned int calBits(unsigned n);

struct list node_list;

int main(int argc, char const *argv[])
{
	list_init(&node_list);
	
	NODE *root = makeNode(NULL, NULL);
	ENC *enc;
	FILE *f;
	FILE *of;
	of = fopen("output.txt", "w");

	char s;

	if ((f = fopen("msg2.txt", "r")) != NULL){
		while((s = fgetc(f)) != EOF){
		 	// printf("msg.txt file의 내용 %c\n", s);
			enc = insertNode(s, root);
			if(enc){ 
				// printf("%d%c", enc->parent_num, enc->letter); 
				saveEncStream(of, (unsigned int)enc->parent_num, (uint8_t)enc->letter);
				// fprintf(of,"%d%c\n",enc->parent_num, enc->letter);
				free(enc); enc = NULL;	
			}


		}
	}

	fclose(f);
	fclose(of);

///////////////

	return 0;
}

void saveEncStream(FILE* of, unsigned int num, uint8_t letter){
	printf("%u, %c\n", num, letter);

	static uint8_t buffer = 0x00;
	static int pos = 7;
	static int cnt = 0;

	int l = calBits(cnt);
	cnt++;
	printf("자리수 l : %d \n", l);

	if(cnt == 2)
		printf("==>%u\n", (buffer&0xFF) );


	if( pos >= l-1 ){ //자리수 충분
		if(cnt == 2)
		printf("==>%u\n", (buffer) );
		buffer = buffer | ( num << pos );
		if(cnt == 2)
		printf("==>%u\n", (buffer) );

		if(cnt==1) printf("%u\n", buffer);
		pos = pos - l;
	}else{
		int remain_len = l;
		unsigned int num_tmp = num;
		num_tmp = num_tmp >> (l - (pos + 1));

		buffer = buffer | (uint8_t)num_tmp;
		fprintf(of,"%c", buffer);
		
		num_tmp = 1 << ( l - (pos + 1));
		num_tmp--;

		num = num & num_tmp;
		remain_len = remain_len - (pos + 1);

		while( remain_len / 8 >= 1 ){
			num_tmp = num;
			num_tmp = num_tmp >> ( remain_len - 8);

			buffer = (uint8_t)num_tmp;
			fprintf(of,"%c", buffer);
			
			num_tmp = 1 << ( remain_len - 8);
			num_tmp--;

			num = num & num_tmp;
			remain_len = remain_len - 8;
		}

		buffer = ((uint8_t)num) << (8-remain_len);
	}
//////////////
	if( pos == 7 ){
		fprintf(of,"%c", letter);
	}else{
		char tmp = letter;
		if( cnt ==1 ) printf("%c, %u\n", letter, letter );
		
		tmp = tmp >> 8 - (pos + 1);

		if( cnt == 1 ) printf("%u\n", buffer);

		buffer = buffer | tmp;
		// pos = 7;
		if( cnt == 1 ) printf("%u\n", buffer);
		fprintf(of, "%c", buffer);


		buffer =  ( letter << (pos + 1) ) ;

		if( cnt == 1 ){ 
			if( (unsigned int)buffer == 128) printf("fuck\n");
			printf("pos: %d\n", pos);
			printf("==>%u\n", (buffer) );
		};
		pos = 8 - ( pos + 1 ) - 1;
	}

}

unsigned int calBits(unsigned n){
	return n==0?1:ceil( log(n+1)/log(2) );
}

NODE* makeNode(char letter, NODE* parent){
	static unsigned int num = 0;
	NODE* pNew = (NODE*) malloc( sizeof(NODE));
	if(!pNew){
		printf("memory allocation fail...\n");
		return NULL;
	}
	list_init(&pNew->children_list);
	pNew->num = num++;
	pNew->letter = letter;
	pNew->parent = parent;

	return pNew;
}

ENC* insertNode(char letter, NODE* root){
	static NODE *ptr = NULL;
	
	NODE *tmp = NULL;
	struct list_elem *el;

	if(ptr){
		// printf("processing\n");
		for(el = list_begin(&ptr->children_list); el != list_end(&ptr->children_list); el = list_next(el)){
			tmp = list_entry(el, NODE, elem);
			if(tmp->letter == letter){
				ptr = tmp;
				return NULL;
			}
		}
		// printf("generate node\n");
		NODE* pNew = makeNode(letter, ptr);
		list_push_back(&ptr->children_list, &pNew->elem);
		// list_push_back(&node_list, &pNew->num_elem);
		ptr = NULL;

		ENC* enc = (ENC*)malloc(sizeof(ENC));
		enc->parent_num = pNew->parent->num;
		enc->letter = letter;

		return enc;
	}else{
		// printf("initial\n");
		for(el = list_begin(&root->children_list); el != list_end(&root->children_list); el = list_next(el)){
		
			tmp = list_entry(el, NODE, elem);
			// printf("%c\n", tmp->letter);
			if(tmp->letter == letter){
				ptr = tmp;
				return NULL;
			}
		}
		// printf("generate node\n");
		NODE* pNew = makeNode(letter, root);

		list_push_back(&root->children_list, &pNew->elem);
		// list_push_back(&node_list, &pNew->num_elem);
		ptr = NULL;

		ENC* enc = (ENC*)malloc(sizeof(ENC));
		enc->parent_num = pNew->parent->num;
		enc->letter = letter;

		return enc;

	}
	
}



